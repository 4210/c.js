- name: hold
  give: [a]
  call: return u[0](a)
- name: free
  give: [a]
  call: u[2](a)
- name: print
  give: [a]
  call: console.log(a)
- name: get_char_code
  give: [a]
  call: a.charCodeAt(a)
  hold: true
- name: parse_float
  give: [a]
  call: parseFloat(a)
  hold: true
- name: debug_function
  give: [a]
  call: debug(o[a])
- name: debug
  call: debugger
- name: parse_int
  give: [a]
  call: parseInt(a)
  hold: true
- name: parse_number
  give: [a]
  call: Number(a)
  hold: true
- name: get_max
  give: [a, e]
  call: Math.max(a, e)
  hold: true
- name: get_min
  give: [a, e]
  call: Math.min(a, e)
  hold: true
- name: floor
  give: [a]
  call: Math.floor(a)
  hold: true
- name: ceil
  give: [a]
  call: Math.ceil(a)
  hold: true
- name: round
  give: [a]
  call: Math.round(a)
  hold: true
- name: get_abs
  give: [a]
  call: Math.abs(a)
  hold: true
- name: get_cos
  give: [a]
  call: Math.cos(a)
  hold: true
- name: get_acos
  give: [a]
  call: Math.acos(a)
  hold: true
- name: get_sin
  give: [a]
  call: Math.sin(a)
  hold: true
- name: get_asin
  give: [a]
  call: Math.asin(a)
  hold: true
- name: get_tan
  give: [a]
  call: Math.tan(a)
  hold: true
- name: get_atan
  give: [a]
  call: Math.atan(a)
  hold: true
- name: get_atan2
  give: [a, e]
  call: Math.atan2(a, e)
  hold: true
- name: get_log
  give: [a]
  call: Math.log(a)
  hold: true
- name: get_sqrt
  give: [a]
  call: Math.sqrt(a)
  hold: true
- name: sleep
  give: [a, e]
  call: setTimeout(e, a)
  hold: true
- name: clear_timeout
  give: [a]
  call: clearTimeout(a)
- name: get_timestamp
  call: Date.now()
  hold: true
- name: queue
  give: [a]
  call: setImmediate(a)
- name: get_char_from_code
  give: [a]
  call: String.fromCharCode(a)
  hold: true
- name: get_char_from_code_point
  give: [a]
  call: String.fromCodePoint(a)
  hold: true
- name: check_if_missing
  give: [a]
  call: a == null
  hold: true
- name: check_if_null
  give: [a]
  call: a === null
  hold: true
- name: check_if_undefined
  give: [a]
  call: a === undefined
  hold: true
- name: check_if_promise
  give: [a]
  call: "!!a && typeof a.then === 'function'"
  hold: true
- name: check_if_array
  give: [a]
  call: Array.isArray(a)
  hold: true
- name: check_if_number
  give: [a]
  call: typeof a === 'number'
  hold: true
- name: check_if_string
  give: [a]
  call: typeof a === 'string'
  hold: true
- name: check_if_float
  give: [a]
  call: a === +a && a !== (a|0)
  hold: true
- name: check_if_integer
  give: [a]
  call: a === +a && a === (a|0)
  hold: true
- name: check_if_object
  give: [a]
  call: Object.prototype.toString.call(a) === '[object Object]'
  hold: true
- name: call
  give: [a, e]
  call: a[e].apply(a, Array.prototype.slice.call(arguments, 2))
  hold: true
- name: create
  give: [a]
  call: "new (Function.prototype.bind.apply(a, Array.prototype.slice.call(arguments)))"
  hold: true
- name: get_typeof
  give: [a]
  call: typeof a
  hold: true
- name: check_instanceof
  give: [a, e]
  call: a instanceof e
- name: create_string
  call: "''"
  hold: true
- name: set_attr
  give: [a, e, f]
  call: a[e] = f
- name: get_attr
  give: [a, e]
  call: a[e]
  hold: true
- name: remove_attr
  give: [a, e]
  call: delete a[e]
- name: branch
  give: [a, e]
  call: if (a) e()
- name: branch_and_return
  give: [a, e]
  call: if (a) return e()
- name: branch_else
  give: [a, e, f]
  call: if (a) { e() } else { f() }
- name: shift_left
  give: [a, e]
  call: a << e
  hold: true
- name: shift_right
  give: [a, e]
  call: a >> e
  hold: true
- name: shift_right_unsigned
  give: [a, e]
  call: a >>> e
  hold: true
- name: compute_bitwise_or
  give: [a, e]
  call: a | e
  hold: true
- name: compute_bitwise_and
  give: [a, e]
  call: a & e
  hold: true
- name: try_catch
  give: [a, e]
  call: try { a() } catch (f) { e(f) }
- name: try_catch_and_return
  give: [a, e]
  call: try { return a() } catch (f) { return e(f) }
- name: throw
  give: [a]
  call: throw a
- name: add
  give: [a, e]
  call: a + e
  hold: true
- name: subtract
  give: [a, e]
  call: a - e
  hold: true
- name: multiply
  give: [a, e]
  call: a * e
  hold: true
- name: divide
  give: [a, e]
  call: a / e
  hold: true
- name: check_if_truthy
  give: [a]
  call: "!!a"
  hold: true
- name: check_if_true
  give: [a]
  call: "a === true"
- name: check_if_false
  give: [a]
  call: "a === false"
- name: check_if_blank
  give: [a]
  call: "!a"
  hold: true
- name: check_if_strict_equal
  give: [a, e]
  call: a === e
  hold: true
- name: check_gt
  give: [a, e]
  call: a > e
  hold: true
- name: check_lt
  give: [a, e]
  call: a < e
  hold: true
- name: check_gte
  give: [a, e]
  call: a >= e
  hold: true
- name: check_lte
  give: [a, e]
  call: a <= e
  hold: true
- name: check_and
  give: [a, e]
  call: a && e
  hold: true
- name: check_or
  give: [a, e]
  call: a || e
  hold: true
- name: set_title
  give: [a, e]
  call: a.title = e
- name: set_src
  give: [a, e]
  call: a.src = e
- name: set_disabled
  give: [a, e]
  call: a.disabled = e
- name: get_title
  give: [a]
  call: a.title
  hold: true
- name: get_src
  give: [a]
  call: a.src
  hold: true
- name: get_disabled
  give: [a]
  call: a.disabled
  hold: true
- name: get_length
  give: [a]
  call: a.length
  hold: true
- name: pop
  give: [a]
  call: a.pop()
  hold: true
- name: push
  give: [a, e]
  call: a.push(e)
- name: check_if_object_has_property
  give: [a, e]
  call: a.hasOwnProperty(e)
  hold: true
- name: modulo
  give: [a, e]
  call: a % e
  hold: true
